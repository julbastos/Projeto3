#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Função para limpar o buffer
void clear_buffer() {
    int c;
    while ((c = getchar()) != '\n' && c != EOF);
}

// Dados do administrador
const char cpf_gerente[] = "51616468882";
const char senha_gerente[] = "admin1";

// Dados dos investidores
char cpfs[10][12] = {
    "12345678910",
    "22124085611",
    "52124009312",
    "22124071613"
};

char senhas[10][7] = {
    "123456",
    "234567",
    "345678",
    "456789"
};

char nomes[10][20] = {
    "Analiza Julia",
    "Ana Lima",
    "Elizabeth Kruger",
    "Julia Barreto"
};

// Saldos dos investidores
float reais[10] = {0.00, 0.00, 0.00, 0.00};
float bitcoin[10] = {0.00, 0.00, 0.00, 0.00};
float ethereum[10] = {0.00, 0.00, 0.00, 0.00};
float ripple[10] = {0.00, 0.00, 0.00, 0.00};
int total_investidores = 4;


void cadastrar_investidor();
void excluir_investidor();
void menu_gerente();
void efetuar_login();
void menu_completo(int cliente);
void consultar_saldo(int cliente);

// Cadastrar novos investidores
void cadastrar_investidor() {
    if (total_investidores >= 10) {
        printf("Não é possível cadastrar novos investidores.\n");
        return;
    }

    printf("Digite o CPF do novo investidor: ");
    scanf("%s", cpfs[total_investidores]);
    printf("Digite a senha do novo investidor: ");
    scanf("%s", senhas[total_investidores]);
    printf("Digite o nome do novo investidor: ");
    scanf(" %[^\n]%*c", nomes[total_investidores]);

    reais[total_investidores] = 0.0;
    bitcoin[total_investidores] = 0.0;
    ethereum[total_investidores] = 0.0;
    ripple[total_investidores] = 0.0;

    total_investidores++;
    printf("Investidor cadastrado.\n");
}

// Excluir investidores
void excluir_investidor() {
    char cpf_excluir[12];
    printf("Digite o CPF do investidor a ser deletado: ");
    scanf("%s", cpf_excluir);

    int encontrado = -1;
    for (int i = 0; i < total_investidores; i++) {
        if (strcmp(cpfs[i], cpf_excluir) == 0) {
            encontrado = i;
            break;
        }
    }

    if (encontrado == -1) {
        printf("O Investidor não existe.\n");
        return;
    }

    for (int i = encontrado; i < total_investidores - 1; i++) {
        strcpy(cpfs[i], cpfs[i + 1]);
        strcpy(senhas[i], senhas[i + 1]);
        strcpy(nomes[i], nomes[i + 1]);
        reais[i] = reais[i + 1];
        bitcoin[i] = bitcoin[i + 1];
        ethereum[i] = ethereum[i + 1];
        ripple[i] = ripple[i + 1];
    }

    total_investidores--;
    printf("Investidor excluído.\n");
}

// Menu do gerente
void menu_gerente() {
    int opcao;
    while (1) {
        printf("==----------------------------==\n");
        printf("Menu: \n");
        printf("1. Cadastrar novo investidor\n");
        printf("2. Excluir investidor\n");
        printf("3. Sair\n");
        printf("Escolha uma opção: ");
        scanf("%d", &opcao);

        switch (opcao) {
            case 1:
                cadastrar_investidor();
                break;
            case 2:
                excluir_investidor();
                break;
            case 3:
                 printf("==----------------------------==\n");
                return; // Retorna 
            default:
                printf("Opção inválida.\n");
        }
    }
}


//Consultar saldo do investidor
void consultar_saldo(int cliente) {
    printf("Saldo do investidor %s:\n", nomes[cliente]);
    printf("Reais: %.2f\n", reais[cliente]);
    printf("Bitcoin: %.2f\n", bitcoin[cliente]);
    printf("Ethereum: %.2f\n", ethereum[cliente]);
    printf("Ripple: %.2f\n", ripple[cliente]);
}

// Menu investidor
void menu_completo(int cliente) {
    int opcao;
    while (1) {
        printf("==----------------------------==\n");
        printf("Menu: \n");
        printf("1. Consultar saldo\n");
        printf("2. Consultar extrato\n");
        printf("3. Depositar\n");
        printf("4. Sacar\n");
        printf("5. Comprar criptomoedas\n");
        printf("6. Vender criptomoedas\n");
        printf("7. Atualizar cotação\n");
        printf("8. Sair\n");
        printf("==----------------------------==\n");
        printf("Escolha sua opção: ");
        scanf("%d", &opcao);

        switch (opcao) {
            case 1:
                consultar_saldo(cliente);
                break;
            case 2:
                printf("Funcionalidade de extrato a ser implementada.\n");
                break;
            case 3:
                printf("Funcionalidade de depósito a ser implementada.\n");
                break;
            case 4:
                printf("Funcionalidade de saque a ser implementada.\n");
                break;
            case 5:
                printf("Funcionalidade de compra de criptomoedas a ser implementada.\n");
                break;
            case 6:
                printf("Funcionalidade de venda de criptomoedas a ser implementada.\n");
                break;
            case 7:
                printf("Funcionalidade de atualização de cotação a ser implementada.\n");
                break;
            case 8:
                return;
            default:
                printf("Opção inválida. Tente novamente.\n");
        }
    }
}

// Função de login
void efetuar_login() {
    char cpf_login[12];
    char senha_login[7];

    printf("Digite seu CPF: ");
    scanf("%s", cpf_login);
    printf("Digite sua senha: ");
    scanf("%s", senha_login);

    // Verifica se o login é do administrador
    if (strcmp(cpf_login, cpf_gerente) == 0 && strcmp(senha_login, senha_gerente) == 0) {
        printf("Acesso concedido ao menu de gerenciamento.\n");
        menu_gerente();
        return;
    }

    // Verifica login para investidores existentes
    for (int i = 0; i < total_investidores; i++) {
        if (strcmp(cpfs[i], cpf_login) == 0 && strcmp(senhas[i], senha_login) == 0) {
            printf("Bem-vindo, %s!\n", nomes[i]);
            menu_completo(i);
            return;
        }
    }

    printf("CPF ou senha inválidos.\n");
}


// Função principal
int main() {
    while (1) { 
        efetuar_login();
        // Realizar um novo login ou encerrar
        int opcao;
        printf("Deseja fazer um novo login? (1. Sim / 2. Não): ");
        scanf("%d", &opcao);
        if (opcao == 2) {
            printf("==----------------------------==\n");
            break; // Encerra o loop
        }
    }
    return 0;
}
